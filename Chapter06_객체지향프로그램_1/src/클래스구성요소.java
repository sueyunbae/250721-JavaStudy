/*
 * 		class ClassName
 * 		{
 * 			-------------------------
 * 			 변수 : 클래스 전체 사용
 * 				   다른 클래스에서 사용이 가능
 * 				   => 클래스 멤버변수
 * 			-------------------------
 * 			 생성자 : 클래스 동일 
 * 				    변수의 초기화
 * 			-------------------------
 * 			 메소드 : 기능 처리
 * 			-------------------------
 * 		}
 * 
 * 		=> 프로그램
 * 			1. 변수
 * 			2. 변수 처리 방법 => 메소드
 * 		=> 1. 변수 설정 : 멤버변수 / 지역변수 / 매개변수
 * 								  |       |
 * 										사용자 요청을 받는 경우
 * 										=> 로그인 id/password
 * 										=> 아이디찾기 id
 * 										=> 검색 검색어
 * 										=> 상세보기 영화
 * 		메소드
 * 		  1. 반복제거
 * 		  2. 구조적인 프로그램
 * 			 단락 나눠서 처리
 * 		  3. 관련된 명령문을 모아서 처리
 * 		  4. 재사용
 * 		  5. 다른 클래스와 통신
 *           ------------- => 수정/추가 
 *        6. 메소드 => 다음에 사용할 수 있게 한 가지 기능만 수행 => 재사용 => 라이브러리
 *      ------------------------------------------------------------------
 *      메소드 
 *        1. 형식
 *        	 [접근지정어][제어어]
 *        			  default/static/abstract/final
 *        		         	  => 컴파일시 자동 저장
 *                                   => 추상메소드:선언
 *                                            => 중단:수정이 불가능 *                                          
 *        	 public/private/protected/default
 *        	 => static 공통으로 사용 (따로따로하려면 인스턴스)
 *           => static이 없는 경우는 객체        
 *           
 *           [접근지정어][제어어] static 리턴형 메소드명(매개변수) //오늘 수업에선 static만
 *           {
 *           	return 결과값
 *           }
 *           
 *           리턴형 : 사용자가 요청한 내용을 처리후에 결과값을 보내준다
 *           		예) 사용자 정수 2개 => 더한 값 요청
 *           			=> 정수
 *           		=> 리턴은 반드시 한개만 전송이 가능
 *           		=> 결과값이 여러개 나올 때는 배열/클래스 이용
 *           			                  --------  
 *           		=> 일반데이터형(참조형 : String, 배열)
 *           메소드명 : 소문자로 시작
 *           		 변수 => 식별자 동일
 *           매개변수 : 사용자가 요청한 값
 *                   결과값이 없는 경우(예:오라클에 저장/삭제/수정해달라) => void 사용
 *        2. 한가지 기능이 어디까지인지...        		
 *        3. 사용자로부터 받는 값 : 매개변수(메소드 인자)
 *        	 여러개 사용이 가능
 *        	 ------------- 3개 이상 : 배열/클래스        
 *        4. 처리 결과 : 리턴형
 *           -------------- 출력해라(void)
 *           
 *           ---------------------------------------------------------------------------------
 *           		리턴형     매개변수
 *           ---------------------------------------------------------------------------------
 *                   O         O       :    String replace(char c1, char c2)
 *                                           => String이 가지고 있는 메소드
 *           ---------------------------------------------------------------------------------
 *                   O         X       :    double random()
 *                                          => Math : 수학
 *           ---------------------------------------------------------------------------------
 *                   X         O       :    void main(String[] arg)
 *                   					   => Database : DML
 *                                                       (INSERT,UPDATE,DELETE)
 *                                         void print(String s)/printf/println
 *           ---------------------------------------------------------------------------------
 *                   X         X       :   사용빈도가 없다
 *                   					   System.ou.pringln()  
 *           ---------------------------------------------------------------------------------
 *           
 *           메소드 : 변수+연산자+제어문
 *           기본 : 입력 기능
 *                 처리 기능 => 세분화(재사용)
 *                 출력 기능
 *          ---------------------------------------
 *        5. 동작순서 
 *        		=> 메소드 호출전까지 수행
 *        		=> 메소드 이동 => 메소드 종료시까지 수행
 *        		=> 호출한 위치로 다시 이동 : 메소드는 동작 후에 다시 돌아온다
 *        		=> 밑에 다음 문장 수행
 *        6. 호출 방법
 *        	  1) 같은 클래스안에서 호출
 *        		 class A
 *        		 {
 *        		    void display()
 *                  {
 *                  }
 *                  public static void main(String[] arg)
 *                  {
 *                      display() => 오류발생
 *                      
 *                      A a=new A();
 *                      a.display()
 *                  }
 *        		 }
 *        	  2) 다른 클래스안에서 호출
 *        		  class A
 *        		  {
 *          		 B.display()  (예: Math.random() => Math가 클래스이름)
 *          
 *          		 String s="";
 *          		 s.trim()
 *          		 String ss=" Hello  Java";
 *          		 ss.trim()
 *          	  }
 *          	  class B
 *          	  {
 *            		static void display()
 *            		{
 *            		}
 *          	  }
 *            3) 인스턴스 메소드 호출
 *        7. 메소드 변수 선언 : 메소드가 종료되면 메모리에서 사라진다 => 지역변수, 매개변수(메소드 안에서만 사용하는 변수)
 *        ** main에서는 소스코딩 없이 시작점만 사용
 *        
 *        범위에 따라 static과 인스턴스가 바뀔 수 있다 => 요구사항분석에서 범위를 잡는다 (교실 시계)
 *              
 *        
 * */
public class 클래스구성요소 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
