/*
 * 1. 개념/정의 => 변수/연산자/제어문/배열
 *               메소드/클래스/객체/캡슐화/다형성
 *               추상클래스/인터페이스/내부클래스/예외처리------------ 11장(기초문법)
 *               											  라이브러리 활용
 *               											  응용 => 조립
 *               												=> 쓰레드/네트워크
 *    메모리
 *    ----- 자바
 *    ------------------
 *    Method 영역
 *      ----- -------
 *             static : 정적변수(초기화X/초기화)
 *      메소드  
 *      ----- --------
 *    ------------------
 *    Heap : 프로그래머가 사용하는 공간 => class 저장/배열
 *           => 사용자 정의
 *    ------------------
 *    Stack : 메모리 관리
 *            => 지역변수/매개변수
 *    ------------------
 *    
 *    ------------------
 *    메모리주소    값
 *    ------------------
 *     0x100     사용중
 *    ------------------
 *     0x104     저장 => 표시 => 별칭 => 변수
 *    ------------------
 *     0x108
 *    ------------------
 *    변수 = 데이터 한개 저장된 메모리 주소의 이름
 *    --- 한개의 데이터만 저장이 가능
 * 2. 분류
 * 3. 선언방식
 * 4. 예시
 * 5. 주의사항
 * 
 * ==> 데이터 관리 ===> 변수 / 클래스 / 배열 ===> RAM
 * 
 * 변수 : 하나의 값을 저장하는 메모리 주소에 붙여진 이름
 *       읽기/쓰기(수정)
 * 1. 정적 타입 언어 => 메모리 크기를 자바에서 지정 => 기본형 (메모리 사용의 최적화, 오류방지, 가독성 향상)
 *                    String/int/double/boolean
 *                    let/var
 *                 => 저장 크기 1byte 2byte 4byte 8byte
 *                    1byte는 bit가 8개(bit:0,1만 저장하는 공간)
 *                    부호비트(0=>양수, 1=>음수)
 *    분류
 *     정수
 *      --------------------
 *       byte => -128~127 => 네트워크 전송/파일 업로드,다운로드
 *      --------------------
 *       short => -32768~32767 => C언어와 호환
 *      --------------------
 *       int => -21억4천~21억4천 => 가장 많이 사용되는 정수 = 컴퓨터의 default
 *      --------------------
 *       long => 2^63+1 ~ 2^63 => 끝에 L자 붙이기 => 금융권, 증권, 빅데이터, AI... 
 *      --------------------
 *     실수 => 정밀도
 *      --------------------
 *       4byte (소수점 7자리) => float(끝에 f)
 *      --------------------
 *       ***8byte (소수점 15자리) => double => default(끝에 d는 생략 가능)
 *           키,뭄무게,평균,확률,예측...
 *      --------------------     
 *     문자 : char => 2byte
 *            => 0~65535(유니코드-모든국가의 언어 표현 가능)
 *     논리 : 1byte => true/false만 저장이 가능
 *           boolean
 *           ------- 조건문 / 반복문 
 *           
 *      ----------------------------------
 *           1byte  2byte  4byte  8byte
 *      ----------------------------------
 *      정수  byte   short  *int   *long
 *      ----------------------------------
 *      실수                float   *double
 *                                 (모든 실수는 double)
 *      ---------------------------------- 
 *      문자         *char
 *      ---------------------------------- 
 *      논리 *boolean
 *      ---------------------------------- 
 *      
 *      byte < short,char < int < long < float < double
 *      
 *     변수 선언
 *     크기지정 변수명;
 *     ------ int, double, char, boolean, byte(배열)...
 *     
 *     크기에 잘 맞아야함! 
 *     byte b1 = 100
 *     byte b2 = 90 
 *     b1 + b2 => int형(127이상이기 때문. int형을 써야함-오류뜨고 수정하라고 알려줌)
 * 2. 동적 타입 언어 => 메모리 크기를 프로그래머가 지정 => 참조형(배열, 클래스)
 *    => 변수 정의 36p
 *    => 지역변수 : 스택 공간 => 메모리에 의해 관리 => 자동 메모리 해제 37p
 *    => 38p 변수명 만들기(식별자)
 *       ** 같은 공간에서 같은 이름의 변수는 사용할 수 없다
 *       변수는 색깔로 구분 가능함
 *       식별자
 *       1) 알파벳/한글 사용이 가능
 *          주의점 : 알파벳 사용 시 대소문자 구분 (int a, int A는 다른 변수)
 *       2) 숫자 사용이 가능
 *          주의점 : 앞에 사용은 불가능(a12b가능, 12ab 불가능)
 *       3) 특수문자 사용 가능(_, $)
 *                         |단어 2개 쓸때 많이 사용, 임시 변수 만들 때 사용
 *                           file_name, file_size, _temp
 *       4) 키워드(예약어)는 사용할 수 없다.
 *          ----------- 자바에서 이미 사용하는 단어(int, byte...)-색깔이 보라색임
 *       5) 공백을 사용할 수 없다.
 *          int file name(X) 
 *          int file_name(O)
 *          int fileName(O)
 *       -------------------------------------------
 *       ** 변수는 의미를 부여(글자수에는 제한이 없지만 3-7글자가 적당하다) 
 *       ** 변수는 소문자로 시작
 *      변수 선언 형식
 *      데이터형 변수명;
 *      ------
 *        정수/실수/문자/논리        
 *      => 선언 => 필요시에 값 변경이 가능함
 *         값 저장
 *         국어점수 저장
 *         int kor; => 4byte메모리 공간을 만들어라. 메모리의 이름은 kor로 설정
 *         kor=80; => 메모리 공간에 80을 저장
 *             -- 초기값
 *         kor=85; => 값 변경
 *      => 선언과 동시에 값 저장 
 *         int kor=80;
 *                 --1
 *             --2    
 *         ** 변수는 반드시 초기값을 지정한다
 *         (1) kor이라는 메모리 공간에 80을 저장해라 X
 *         (2) 80을 메모리 공간인 kor에 저장한다 O (순서가 이게 맞음. 대입은 뒤에서부터!값을 먼저 본다)
 *         char c='A';
 *         char c=65; (c에는 A가 저장되어 있음)
 *         A => 65, a => 97
 *         int a='a'; (변수 a에는 숫자 97이 저장됨)
 *         char a=97; (변수 a에는 문자 a가 저장됨)
 *         double d=10; (변수 d에는 실수 10.0이 저장됨)
 *         
 *         변수 = 값
 *          |    |
 *               변수의 크기보다 작거나 같다
 *         변경 => 다른 값
 *          char = int ==> char값
 *          int = char ==> int값
 *          double = char ==> double값
 *          double = int ==> double값
 *          int = double ==> error
 * */

public class 변수선언_36p {
	public static void main(String[] args) {
		char c='A';
		char c1=65;
		System.out.println(c);
		System.out.println(c1);
		int a=65;
		int a1='A';
		System.out.println(a);
		System.out.println(a1);
		double d=100;
		System.out.println(d);
		boolean b=true;//boolean은 무조건 true/false만!! (다른 변수들은 호환이 되지만 boolean은 안됨)
		System.out.println(b);
		b=false; //값 변경. 다시 데이터형 선언하지 않아도 됨. 계속 변경 가능. 제일 마지막 값이 실제 값.
		System.out.println(b);		
		
		//상수 => 모든 문자가 대문자
		final int ABC=100;
		//ABC=200; 이렇게 값 변경하면 오류남
		System.out.println(ABC);
		System.out.println(Integer.MAX_VALUE);//다 대문자=>변하지 않는 상수(2147483647)
		
		//int ii=10.5; 오류남
		int ii=(int)10.8; //자동형변환. 여기선 소수점을 다 지워줌. downcasting
		System.out.println(ii); //10 출력
		System.out.println((int)'B');//정수 66출력 데이터형이 커져서 upcasting
		// upcasting / downcasting 구분해야 함
	}

}
