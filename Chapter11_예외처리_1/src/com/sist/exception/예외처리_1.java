package com.sist.exception;
/*
 * 		제어문 / 객체(클래스 / 객체 생성 / 메소드)
 * 		인터페이스 / 예외처리
 * 		라이브러리
 * 		------------------------------------ 복습 꼭 하기
 * 		예외처리
 * 		-----
 * 		 = 가독성 => 메소드(분석 => 유지보수)
 * 				   ---- 웹 : 오라클 데이터 처리, 브라우저로 데이터 전송
 * 												   ---- 변수
 * 		 = 견고성 => 예외처리 
 * 				   ----- 사용자 입력 실수 / 개발자 실수
 * 		 = 최적화 => 실행 속도 : 라이브러리
 * 				   윈도우 = 쓰레드
 * 		   Buffer 
 * 		------------------------------ 
 * 
 * 		예외처리 
 * 			= 사전에 에러를 방지하는 목적
 * 			= 비정상종료 => 정상상태 유지
 * 			= 모든 언어(자바스크립트) => 객체 지향
 * 								  -------
 * 								  1. 자바와 다른 경우
 * 								     for aa of 배열
 * 									 map()
 * 		----------------------------------------------
 * 		예외처리 방법 
 * 			직접 처리 : try~catch => 어떤 에러
 * 								  ------- catch는 여러개
 * 			간접 처리 : 시스템에 의해 처리
 * 					 메소드() throws 
 * 							------ 
 * 			임의로 발생 => 테스트용
 * 						throw 예외처리클래스
 * 			사용자 정의 => 모든 예외 제공(X)
 * 			-------- 
 * 						class MyException extends Exception
 * 			 데이터형 : 영화 / 맛집 ... 
 * 			 클래스 : 메소드
 * 			 예외처리 => 첫번째 : if
 * 					  ---------
 * 			 -------------------------- 나머지는 개발자
 * 			직접처리
 * 			try
 * 			{
 * 				정상 수행하는 명령문
 * 			}catch(예외처리클래스)
 * 			{
 * 				에러발생시 처리
 * 			}
 * 			finally => 생략 가능
 * 			{
 * 				무조건 수행하는 문장
 * 				1. 오라클 서버 연결 해제
 * 				2. 서버 연결 해제
 * 				3. 파일 닫기
 * 			}
 * 			
 * 			9 => 내부 클래스
 * 				 -------- 네트워크 / 쓰레드
 * */
import java.io.*;
public class 예외처리_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 변수
		try
		{
			// 정상 수행
			System.out.println("1");
			System.out.println(10/0);//에러발생 => catch로 이동 
			System.out.println("3");
			
			// 변수 / 클래스 선언 
		}catch(Exception e)
		{
			// try 수행 중에 에러가 나는 경우 => 예측
			System.out.println("4");
		}finally
		{
			// 무조건 실행되는 문장
			System.out.println("5");
		}
	}

}

