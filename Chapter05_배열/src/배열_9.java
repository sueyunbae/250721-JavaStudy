/*
 *  => 데이터별 묶음 : 배열
 *  => 단위별 묶음 : 클래스 => 구조체
 *  => 명령문 묶음 : 메소드
 *  ------------------------------- 클래스  ===> 클래스 여러개를 묶어서 프로그램을 만듦
 * 	1. 자바 메모리 구조(JVM)
 * 	   -----------------------
 * 		Method Area => static (메소드는 여기에 저장됨)
 * 		main/사용자 정의 메소드 => 기능
 * 	   -----------------------
 * 		Heap:배열 데이터/클래스데이터
 * 			  => 프로그래머 관리 영역
 * 			  => new 이용
 * 			  => 자동 메모리 해제(가비지 컬렉션) System.gc()
 * 	   -----------------------
 * 		Stack:지역변수/매개변수/참조주소 
 * 				=> 메모리 관리 => 자동으로 삭제
 * 					{}이 종료가 되면 자동으로 삭제됨
 * 	   -----------------------
 * 
 * 		스택   |  힙
 * 		주소값 => 실제데이터
 * 			  |
 *      int[] arr=new int[5]
 *                       arr[0][1]  [2]  [3]  [4]
 *      ----arr------     -----------------------
 *       [I@13221655       0    0    0    0    0
 *      -------------     |-----------------------
 *                       [I@13221655 
 * 						 => 데이터형이 동일
 *                          int[] arr={10,'A','b',20}('A'=65,'b'=98이 저장됨)
 *                          double[] arr={10,20,30,40,50}(10.0,20.0...으로 저장됨)
 *                          String은 형변환이 안된다
 * 		main : 조립기
 *      웹에서는 spring이 메인보드(조립기) 역할 => Framework
 *  	
 * */
// 6개의 난수 => 1~45 "중복없는" 데이터 
// => 고스톱
import java.util.Arrays;
public class 배열_9 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] lotto=new int[6];
		for(int i=0;i<lotto.length;i++)
		{
			lotto[i]=(int)(Math.random()*45)+1;
			for(int j=0;j<i;j++)//이미 저장된 데이터와 현재 발생한 데이터를 비교
			{
				if(lotto[i]==lotto[j])
				{
					i--;
					break;
				}
			}
		}
		Arrays.sort(lotto);//오름차순으로 변경
		for(int i=lotto.length-1;i>=0;i--)//거꾸로 출력=>내림차순으로 출력
		{
			System.out.print(lotto[i]+" ");
		}
	}
	

}
